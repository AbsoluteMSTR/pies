{"name":"Pies","tagline":"The simplest (and tastiest) way to write one program that runs on both Python 2 and Python 3.","body":"![isort](https://raw.github.com/timothycrosley/pies/develop/logo.png)\r\n====================\r\n[![PyPi version](https://pypip.in/v/isort/badge.png)](https://crate.io/packages/isort/)\r\n[![PyPi downloads](https://pypip.in/d/isort/badge.png)](https://crate.io/packages/isort/)\r\n\r\nThe simplest (and tastiest) way to write one program that runs on both Python 2.6+ and Python 3.\r\n\r\nLet's eat some pies!\r\n======================\r\n\r\nInstalling pies\r\n\r\n    pip install pies\r\n\r\nor if you prefer:\r\n\r\n    easy_install pies\r\n\r\nOverview\r\n====================\r\n\r\nPies is a Python2 & 3 Compatibility layer with the philosophy that all code should be Python3 code.\r\nStarting from this viewpoint means that when running on Python3 pies adds virtually no overhead.\r\n\r\nInstead of providing a bunch of custom methods (leading to Python code that looks out of place on any version)\r\npies aims to back port as many of the Python3 api calls, imports, and objects to Python2 - Relying on special syntax\r\nonly when absolutely necessary.\r\n\r\nHow does pies differ from six?\r\n====================\r\n\r\nPies is significantly smaller and simpler then six because it assumes for\r\neverything possible the developer is using the Python 3 compatible versions included with Python 2.6+,\r\nwhereas six tries to maintain compatibility with Python 2.4 -\r\nleading to many more overrides and further into different language territory.\r\nAdditionally, as stated above, where possible pies tries to enable you to not have to change syntax at all.\r\n\r\nIntegrating pies into your diet\r\n======================\r\n\r\nUsing and integrating pies into an existing Python 3+ code base (to achieve Python 2 & 3 dual support) couldn't be simpler:\r\n\r\n    from __future__ import absolute_import, division, print_function, unicode_literals\r\n\r\n    from pies.overrides import *\r\n\r\nThen simply write standard Python3 code, and enjoy Python2 Support.\r\n\r\nWorks Unchanged (The Good)\r\n======================\r\n\r\nThe best part of Pies is how much Python3 code works unchanged in Python2\r\n\r\nFunctions:\r\n\r\n- round\r\n- next\r\n- filter\r\n- map\r\n- zip\r\n- input\r\n- range\r\n\r\nTypes:\r\n\r\n- chr (creates a unichr object in Python2)\r\n- str (creates a unicode object in Python2)\r\n- dict (creating a dict using dict() will give you all the special Python3 itemview results, but using {} will not)\r\n\r\nImports:\r\n\r\n- html\r\n- http\r\n- xmlrpc\r\n- _thread\r\n- builtins\r\n- configparser\r\n- copyreg\r\n- queue\r\n- reprlib\r\n- socketserver\r\n- ipaddress\r\n- argparse\r\n- enum (also adds this library to Python 3.0-3.3)\r\n\r\nDifferent Imports (The Bad)\r\n======================\r\n\r\nSome Python3 Modules have moved around so much compared to their Python2 counterpart, that I found it necessary to create special\r\nversions of them to obtain the Python3 naming on both environments. Since these modules exist already in Python2\r\nallowing them to be imported by the Python3 module name directly is not possible. Instead, you must import these\r\nmodules from pies.\r\n\r\nExample:\r\n\r\n    form pies import pickle\r\n\r\nFull List:\r\n\r\n- dbm\r\n- urllib\r\n- collections\r\n- functools\r\n- imp\r\n- itertools\r\n- pickle\r\n- StringIO\r\n- sys\r\n\r\nSpecial Syntax (The Ugly)\r\n======================\r\n\r\nSadly, there is still special syntax that is present for corner cases.\r\n\r\n- PY2 - True if running on Python2\r\n- PY3 - True if running on Python3\r\n- u('text') - should replace u'text' made available for ease of porting code from Python2\r\n- itemsview(collection) - should replace collection.iteritems() where you do not control the collection passed in\r\n- valuesview(collection) - should replace collection.values() where you do not control the collection passed in\r\n- keysview(collection) - should replace collection.keys() where you do not control the collection passed in\r\n- execute() - enables Python 3 style exec statements on both environments.\r\n- integer_types - may want to use isinstance(variable, integer_types) instead of type(variable, int) as long values will not match int in Python2.\r\n\r\nWhat Could be Improved?\r\n======================\r\n\r\nI'm pretty sure a bunch. If you run into any problems or have any ideas please don't hesitate to file a bug, submit a pull request,\r\nor email me at timothy.crosley@gmail.com.\r\n\r\n--------------------------------------------\r\n\r\nThanks and I hope you enjoy pies!\r\n\r\n~Timothy\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}